블록 태그 : 
	- 라인의 끝까지 적용되고, 엔터가 적용됨 
	- 블록 태그 내부에는 인라인 태그가 올 수 있다. 
	- 블록 태그 배부에 다른 블록 태그가 올 수도 있고 그렇지 않을 수도 있다.
	- <div>, <table>, <h1> ~ <h6> , <p>, <form>, <ol><li>, <ul>, dl, dt,dd pre .... 블락 태그 
	- hr
	- header, section, nav, aside, footer    : 페이지의 레이 아웃을 잡는 태그  <== 시멘트릭 태그 
	- 기본 width 가 100% 
	- 기본 height 가 auto  <== 내용물에 따라 맞추어서 적용됨. 
	- width , height 를 지정 할 수 있다. 
	- 페이지 레이아웃 잡을때 사용됨 
	- margin , padding  <== 4가지 방향으로 적용됨 (위,오른쪽, 아랫쪽, 왼쪽)

인라인 태그 :
	- 태그가 붙어서 출력  
	- 인라인 태그 내부에는 블록 태그를 넣을 수 없다. 
	- span, a , br, em, strong, input, label, img  
	- 기본으로  width : auto, height : auto
	- width, height 를 지정 할 수 없다. 
	- margin, padding <= 왼쪽 , 오른쪽 만 적용됨   ( 위아래는 적용 안됨 )


인라인 블락 : 
	- 블락 ==> 인라인 , 인라인 => 블락 , (블락, 인라인) => 인라인 블락 
	- display : inline-block ; 로 정의 되었을 때 

	- 인라인 요소 처럼 너비와 높이가 내부 컨텐츠 만큼 적용됨 . width : auto, height : auto 
	- width , height 의 크기를 지정 할 수 있음.  (블락의 특징)
	- margin, padding 을 4방향으로 모두 지정 할 수 있음. (블락의 특징)


태그 내부의 속성 : 
     id = "값"		#값 { 스타일 } 	<== 페이지에서 값이 고유값
     class = "값"		.값 { 스타일 } 	<== 페이지에서 중복 적용 


==========================================================
CSS 적용 방법 
  - 내부 스타일  : 그 페이지에서만 적용 
  - 외부 스타일  : 여러 페이지에서 불러 와서 사용 가능 , 여러 페이지 에서 공통으로 사용되는 스타일 
  - 인라인 스타일 : 태그 내부에 스타일을 적용 , 

=============================================================
선택자 : 스타일을 적용할 대상 
   - type(태그) 선택자  : 태그를 불러와서 스타일을 적용  <=== 
		- 스타일을 적용한 태그가 이후에 추가될 경우 고려 해야함. 
   - id 선택자 : 태그 내부 속성에 <div id = "값" >   </div> 
        - #값 으로 불러 들임. 
		- 페이지 내부에서 값은 중복되지 않도록 설정 
		- 하나에만 고유하게 적용됨. 
   - class 선택자 : 태그 내부 속성 <div class = "값" "값">  </div> 
		- .값 으로 불러 들임 
		- 값이 페이지 내에서 동일하게 적용 할 수 있다. 
		- 여러 태그에 한꺼번에 스타일을 적용할때 사용됨. 
   - 전체 선택자 : * , body 블락의 모든 태그를 선택 
		- 개발시 초기 세팅을 할때 사용함. 
		- * { margin : 0 ; padding : 0 }
   - 하위 선택자 : 블락 하위의 태그를 선택 
        - 부모태그  하위태그 {      }
		- 공백이  하위 선택자 
	- 자식 선택자 : 직계 자식을 뜻함.
	    - 부모태그 > 직계자식 {      }
		-  >  
	- 인접 선택자 : 태그에 형제 레벨로 인접한 선택자 
		- 형제태그 + 인접태그 {    }
		-  + 
	- 형제 선택자 : 같은 형제 레벨에 존재하는 선택자 
	    - 형제태크 ~ 형제태그 {       }
		- ~ 
	- 그룹 선택자 : 여러 태그에 한꺼번에 스타일이 적용됨 
		-  태그1, 태그2, 태그3 {       }

	- 속성 선택자 : 태그의 해당 속성이 적용된 태그만 선택됨 
		- 태그[속성] {    }
	- 가상클래스 선택자 : 태그의 액션을 선택 
		- a:hover {      }

https://studiomeal.com/archives/197 
    IE 브라우져에서는 지원안됨  ----> Flex  
    - IE  ==> 엣지 

    -- float :   블락 ==> 인라인 
	-- width 가 지정 되어야 하위 블락이 비어있는 공간으로 올라옴
	-- margin , padding 을 사용해서 박스의 공간을 처리 
	-- clear 를 반드시 사용 : 사용후
	-- 형제 레벨에서 float 속성을 적용 
 
    -- Flex : 블락의 width 를 지정 하지 않더라도 자동으로  처리됨 
	-- margin, padding 을 사용하지 않고 자동으로 처리 
	-- 부모 레벨에서 처리됨. 
	-- 형제 레벨에서 처리됨

-- 태그<div> , 엘리멘트(박스)   : <div> </div> 
positon :  엘리멘트(박스)의 위치를 조정 : left, top, right , bottom  
    - relative 	: 자기 자신의 원본 위치를 기준점 , 자신의 블락이 없어지지 않음. 

    - absolute	: 
		기본적으로 부모의 position 설정이 없는 경우 : 
			body ( ) 를 기준점으로 설정, 자신의 블락이 없어짐. 
		- 부모 relative & 자식 absolute ( 부모의 position 의 값이 있는 경우? ) 
		     - parent 를 기준점으로 설정됨 
		- 조상 relative & 자식 absolute ( 조상의 position의 값이 있는 경우 ?) 
		     조상을 기준점으로 잡는다. 
		- 조상 position 없음 & 자식 absolute 
		      - view port를 기준 점으로 잡는다.  body ( left 0 , right 0) 
			 
    - fixed 	: 뷰 포트(pc, 테블릿, 모바일)  를 기준점으로 잡는다.  , 
	-- body 의 왼쪽 최상단 ( left 0px, top 0px) 
	--  스크롤을 이동하더라도 항상 고정 위치에 있음. 
	-- 자신의 블락이 없어짐. body 가 기준점 


z-index : 박스의 레이어를 적용해서 박스의 우선 순위 결정 .  21억
    - 값이 낮을 수록 아래에 적용됨 
    - 값이 높을 수록 위에 적용됨 

    - 10 , 20, 30, 
    -  100, 200, 300 ........

투명도 설정 : opacity 
   - opacity : 1.0   <=== 완정 불투명 
   - opacity : 0.5   <===  투명도 : 50% 
   - opacity : 0.0   <=== 완전 투명  



   css 충돌 되는 경우 
	-- 상속 누적 적용됨 
	-- 어떤 항목은 충돌이 발생 될수 있다. (동일한 항목 적용한 경우) 
	-- 동일한 레벨에서는 마지막에 설정한 것이 적용됨. 
	--  !important; 		<== 가장 강력 하게 적용 ,  꼭 필요한 곳에만 사용, 남발 금지. 

	-- 실무에서는 !important , 인라인에 직접 스타일 넣는 것을 피해야됨 


   외부 파일 < 내부 적용 < 태그내부(인라인 스타일) 에 적용

   선택자에 따라서 충돌 발생시 우선순위 :    * (전체) , 태그, class , id , 인라인(태그내부) 
	*  <   태그  <  class    <  id    <  인라인(태그내부)     <   !important ; 

Front End : 뷰 (화면에 출력), 사용자에게 보여지는 부분 
   - HTML (뼈대) , CSS (인테리어) , JavaScript (이크마스크립트6) , <== 핵심 기술 

   - JQuery : 자바스크립트 라이브러리 
   -  리엑트 : FaceBook 에서 만든 SPA 를 위한 JavaScript 라이브러리 
	- 클라이언트에서 서버의 값을 JSON 형식으로 받아와서 , client 에서 랜더링 (태그 생성)  <== CSR 
   - 뷰, 앵귤러(구글) (x)     <=== 

BackEnd : 비즈니스 로직 처리 , DataBase (Oracle, MySQL, MariaDB, .....) , 
	MVC  : 협업 가능, 유지 쉽다.  , 
		Client ==>  Controller   ==> DTO   ==> DAO  ==> DB     

	<== SSR (서버 사이드 랜더링 ) 
     - JSP 	: html + java 	,    *.jsp		<== 톰켓(WAS) : Server 에서 Java 코드를 랜더링(태그) 해서 클라이언트에게 전송,  	
     - PHP : html + c
     - .net 
     - Thymeleaf 	<== spring boot 
   ===============프레임워크 (틀)  : 자동기술이 녹아있음. ==========================================
	srping boot : java 기반의 백엔드 프레임워크 	<== 국내 프로잭트 대부분 
	node.js   : JavaScript 기반의 백엔드 프레임워크 
	Django  : phyon 기반의 백엔드 프레임워크 

    
라이브러리 vs 프레임워크 (틀) 
    - 라이브러리 : Linux 	<== 뭐든지 내가 다 구현 할 수 있다. , 구현하기 위해서는 손이 많이 간다. 
		- 자신이 주가 되어서 뭐든지 구현 할 수 있다. 
    - 프레임워크 : MAC  	<== 모든 것이 구현되어있다. 틀을 벗어나기 힘들다. 
		- 구현되어있는 틀 내부에서 구현, 



1월 15일 : -  개인 프로잭트 ppt , 
	 - AWS 계정 생성 하기 (EC2) - 신용카드 등록    <== 무료 (1년) , 프리 티어
 	 - aws ec2 계정 생성	<== 

	https://aws.amazon.com/ko/free/	<== AWS 계정 생성, 신용카드
	https://sujinisacat.tistory.com/12	<== 블로그 











